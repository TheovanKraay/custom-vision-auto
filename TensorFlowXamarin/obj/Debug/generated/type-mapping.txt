org/tensorflow/contrib/android/RunStats = Org.Tensorflow.Contrib.Android.RunStats
  <init>()V = .ctor()
  add([B)V = Add(byte[])
  close()V = Close()
  runOptions()[B = RunOptions()
  summary()Ljava/lang/String; = Summary()
org/tensorflow/contrib/android/TensorFlowInferenceInterface = Org.Tensorflow.Contrib.Android.TensorFlowInferenceInterface
  <init>(Landroid/content/res/AssetManager;Ljava/lang/String;)V = .ctor(Android.Content.Res.AssetManager, string)
  <init>(Ljava/io/InputStream;)V = .ctor(System.IO.Stream)
  <init>(Lorg/tensorflow/Graph;)V = .ctor(Org.Tensorflow.Graph)
  getStatString()Ljava/lang/String; = StatString
  close()V = Close()
  feed(Ljava/lang/String;[Z[J)V = Feed(string, bool[], params long[])
  feed(Ljava/lang/String;[B[J)V = Feed(string, byte[], params long[])
  feed(Ljava/lang/String;[D[J)V = Feed(string, double[], params long[])
  feed(Ljava/lang/String;[F[J)V = Feed(string, float[], params long[])
  feed(Ljava/lang/String;[I[J)V = Feed(string, int[], params long[])
  feed(Ljava/lang/String;Ljava/nio/ByteBuffer;[J)V = Feed(string, Java.Nio.ByteBuffer, params long[])
  feed(Ljava/lang/String;Ljava/nio/DoubleBuffer;[J)V = Feed(string, Java.Nio.DoubleBuffer, params long[])
  feed(Ljava/lang/String;Ljava/nio/FloatBuffer;[J)V = Feed(string, Java.Nio.FloatBuffer, params long[])
  feed(Ljava/lang/String;Ljava/nio/IntBuffer;[J)V = Feed(string, Java.Nio.IntBuffer, params long[])
  feed(Ljava/lang/String;Ljava/nio/LongBuffer;[J)V = Feed(string, Java.Nio.LongBuffer, params long[])
  feed(Ljava/lang/String;[J[J)V = Feed(string, long[], params long[])
  feedString(Ljava/lang/String;[B)V = FeedString(string, byte[])
  feedString(Ljava/lang/String;[[B)V = FeedString(string, byte[][])
  fetch(Ljava/lang/String;[B)V = Fetch(string, byte[])
  fetch(Ljava/lang/String;[D)V = Fetch(string, double[])
  fetch(Ljava/lang/String;[F)V = Fetch(string, float[])
  fetch(Ljava/lang/String;[I)V = Fetch(string, int[])
  fetch(Ljava/lang/String;Ljava/nio/ByteBuffer;)V = Fetch(string, Java.Nio.ByteBuffer)
  fetch(Ljava/lang/String;Ljava/nio/DoubleBuffer;)V = Fetch(string, Java.Nio.DoubleBuffer)
  fetch(Ljava/lang/String;Ljava/nio/FloatBuffer;)V = Fetch(string, Java.Nio.FloatBuffer)
  fetch(Ljava/lang/String;Ljava/nio/IntBuffer;)V = Fetch(string, Java.Nio.IntBuffer)
  fetch(Ljava/lang/String;Ljava/nio/LongBuffer;)V = Fetch(string, Java.Nio.LongBuffer)
  fetch(Ljava/lang/String;[J)V = Fetch(string, long[])
  graph()Lorg/tensorflow/Graph; = Graph()
  graphOperation(Ljava/lang/String;)Lorg/tensorflow/Operation; = GraphOperation(string)
  run([Ljava/lang/String;)V = Run(string[])
  run([Ljava/lang/String;Z)V = Run(string[], bool)
org/tensorflow/DataType = Org.Tensorflow.DataType
  BOOL = Bool
  DOUBLE = Double
  FLOAT = Float
  INT32 = Int32
  INT64 = Int64
  STRING = String
  UINT8 = Uint8
  fromClass(Ljava/lang/Class;)Lorg/tensorflow/DataType; = FromClass(Java.Lang.Class)
  valueOf(Ljava/lang/String;)Lorg/tensorflow/DataType; = ValueOf(string)
  values()[Lorg/tensorflow/DataType; = Values()
org/tensorflow/Graph = Org.Tensorflow.Graph
  <init>()V = .ctor()
  close()V = Close()
  importGraphDef([B)V = ImportGraphDef(byte[])
  importGraphDef([BLjava/lang/String;)V = ImportGraphDef(byte[], string)
  opBuilder(Ljava/lang/String;Ljava/lang/String;)Lorg/tensorflow/OperationBuilder; = OpBuilder(string, string)
  operation(Ljava/lang/String;)Lorg/tensorflow/Operation; = Operation(string)
  operations()Ljava/util/Iterator; = Operations()
  toGraphDef()[B = ToGraphDef()
org/tensorflow/Operand = Org.Tensorflow.IOperand
  asOutput()Lorg/tensorflow/Output; = AsOutput()
org/tensorflow/Operation = Org.Tensorflow.Operation
  inputListLength(Ljava/lang/String;)I = InputListLength(string)
  name()Ljava/lang/String; = Name()
  numOutputs()I = NumOutputs()
  output(I)Lorg/tensorflow/Output; = Output(int)
  outputList(II)[Lorg/tensorflow/Output; = OutputList(int, int)
  outputListLength(Ljava/lang/String;)I = OutputListLength(string)
  type()Ljava/lang/String; = Type()
org/tensorflow/OperationBuilder = Org.Tensorflow.OperationBuilder
  addControlInput(Lorg/tensorflow/Operation;)Lorg/tensorflow/OperationBuilder; = AddControlInput(Org.Tensorflow.Operation)
  addInput(Lorg/tensorflow/Output;)Lorg/tensorflow/OperationBuilder; = AddInput(Org.Tensorflow.Output)
  addInputList([Lorg/tensorflow/Output;)Lorg/tensorflow/OperationBuilder; = AddInputList(Org.Tensorflow.Output[])
  build()Lorg/tensorflow/Operation; = Build()
  setAttr(Ljava/lang/String;Z)Lorg/tensorflow/OperationBuilder; = SetAttr(string, bool)
  setAttr(Ljava/lang/String;[Z)Lorg/tensorflow/OperationBuilder; = SetAttr(string, bool[])
  setAttr(Ljava/lang/String;[B)Lorg/tensorflow/OperationBuilder; = SetAttr(string, byte[])
  setAttr(Ljava/lang/String;F)Lorg/tensorflow/OperationBuilder; = SetAttr(string, float)
  setAttr(Ljava/lang/String;[F)Lorg/tensorflow/OperationBuilder; = SetAttr(string, float[])
  setAttr(Ljava/lang/String;Ljava/lang/String;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, string)
  setAttr(Ljava/lang/String;[Ljava/lang/String;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, string[])
  setAttr(Ljava/lang/String;J)Lorg/tensorflow/OperationBuilder; = SetAttr(string, long)
  setAttr(Ljava/lang/String;[J)Lorg/tensorflow/OperationBuilder; = SetAttr(string, long[])
  setAttr(Ljava/lang/String;Lorg/tensorflow/DataType;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.DataType)
  setAttr(Ljava/lang/String;[Lorg/tensorflow/DataType;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.DataType[])
  setAttr(Ljava/lang/String;Lorg/tensorflow/Shape;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.Shape)
  setAttr(Ljava/lang/String;[Lorg/tensorflow/Shape;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.Shape[])
  setAttr(Ljava/lang/String;Lorg/tensorflow/Tensor;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.Tensor)
  setAttr(Ljava/lang/String;[Lorg/tensorflow/Tensor;)Lorg/tensorflow/OperationBuilder; = SetAttr(string, Org.Tensorflow.Tensor[])
  setDevice(Ljava/lang/String;)Lorg/tensorflow/OperationBuilder; = SetDevice(string)
org/tensorflow/Output = Org.Tensorflow.Output
  <init>(Lorg/tensorflow/Operation;I)V = .ctor(Org.Tensorflow.Operation, int)
  asOutput()Lorg/tensorflow/Output; = AsOutput()
  dataType()Lorg/tensorflow/DataType; = DataType()
  index()I = Index()
  op()Lorg/tensorflow/Operation; = Op()
  shape()Lorg/tensorflow/Shape; = Shape()
org/tensorflow/SavedModelBundle = Org.Tensorflow.SavedModelBundle
  close()V = Close()
  graph()Lorg/tensorflow/Graph; = Graph()
  load(Ljava/lang/String;[Ljava/lang/String;)Lorg/tensorflow/SavedModelBundle; = Load(string, params string[])
  metaGraphDef()[B = MetaGraphDef()
  session()Lorg/tensorflow/Session; = Session()
org/tensorflow/Session = Org.Tensorflow.Session
  <init>(Lorg/tensorflow/Graph;)V = .ctor(Org.Tensorflow.Graph)
  <init>(Lorg/tensorflow/Graph;[B)V = .ctor(Org.Tensorflow.Graph, byte[])
  close()V = Close()
  runner()Lorg/tensorflow/Session$Runner; = InvokeRunner()
org/tensorflow/Shape = Org.Tensorflow.Shape
  make(J[J)Lorg/tensorflow/Shape; = Make(long, params long[])
  numDimensions()I = NumDimensions()
  scalar()Lorg/tensorflow/Shape; = Scalar()
  size(I)J = Size(int)
  unknown()Lorg/tensorflow/Shape; = Unknown()
org/tensorflow/Tensor = Org.Tensorflow.Tensor
  booleanValue()Z = BooleanValue()
  bytesValue()[B = BytesValue()
  close()V = Close()
  copyTo(Ljava/lang/Object;)Ljava/lang/Object; = CopyTo(Java.Lang.Object)
  create(Ljava/lang/Class;[JLjava/nio/ByteBuffer;)Lorg/tensorflow/Tensor; = Create(Java.Lang.Class, long[], Java.Nio.ByteBuffer)
  create(Ljava/lang/Object;)Lorg/tensorflow/Tensor; = Create(Java.Lang.Object)
  create(Ljava/lang/Object;Ljava/lang/Class;)Lorg/tensorflow/Tensor; = Create(Java.Lang.Object, Java.Lang.Class)
  create([JLjava/nio/DoubleBuffer;)Lorg/tensorflow/Tensor; = Create(long[], Java.Nio.DoubleBuffer)
  create([JLjava/nio/FloatBuffer;)Lorg/tensorflow/Tensor; = Create(long[], Java.Nio.FloatBuffer)
  create([JLjava/nio/IntBuffer;)Lorg/tensorflow/Tensor; = Create(long[], Java.Nio.IntBuffer)
  create([JLjava/nio/LongBuffer;)Lorg/tensorflow/Tensor; = Create(long[], Java.Nio.LongBuffer)
  dataType()Lorg/tensorflow/DataType; = DataType()
  doubleValue()D = DoubleValue()
  expect(Ljava/lang/Class;)Lorg/tensorflow/Tensor; = Expect(Java.Lang.Class)
  floatValue()F = FloatValue()
  intValue()I = IntValue()
  longValue()J = LongValue()
  numBytes()I = NumBytes()
  numDimensions()I = NumDimensions()
  numElements()I = NumElements()
  shape()[J = Shape()
  writeTo(Ljava/nio/ByteBuffer;)V = WriteTo(Java.Nio.ByteBuffer)
  writeTo(Ljava/nio/DoubleBuffer;)V = WriteTo(Java.Nio.DoubleBuffer)
  writeTo(Ljava/nio/FloatBuffer;)V = WriteTo(Java.Nio.FloatBuffer)
  writeTo(Ljava/nio/IntBuffer;)V = WriteTo(Java.Nio.IntBuffer)
  writeTo(Ljava/nio/LongBuffer;)V = WriteTo(Java.Nio.LongBuffer)
org/tensorflow/TensorFlow = Org.Tensorflow.TensorFlow
  loadLibrary(Ljava/lang/String;)[B = LoadLibrary(string)
  registeredOpList()[B = RegisteredOpList()
  version()Ljava/lang/String; = Version()
org/tensorflow/TensorFlowException = Org.Tensorflow.TensorFlowException
org/tensorflow/Tensors = Org.Tensorflow.Tensors
  create(Z)Lorg/tensorflow/Tensor; = Create(bool)
  create([Z)Lorg/tensorflow/Tensor; = Create(bool[])
  create([[Z)Lorg/tensorflow/Tensor; = Create(bool[][])
  create([[[Z)Lorg/tensorflow/Tensor; = Create(bool[][][])
  create([[[[Z)Lorg/tensorflow/Tensor; = Create(bool[][][][])
  create([[[[[Z)Lorg/tensorflow/Tensor; = Create(bool[][][][][])
  create([[[[[[Z)Lorg/tensorflow/Tensor; = Create(bool[][][][][][])
  create([B)Lorg/tensorflow/Tensor; = Create(byte[])
  create([[B)Lorg/tensorflow/Tensor; = Create(byte[][])
  create([[[B)Lorg/tensorflow/Tensor; = Create(byte[][][])
  create([[[[B)Lorg/tensorflow/Tensor; = Create(byte[][][][])
  create([[[[[B)Lorg/tensorflow/Tensor; = Create(byte[][][][][])
  create([[[[[[B)Lorg/tensorflow/Tensor; = Create(byte[][][][][][])
  create(D)Lorg/tensorflow/Tensor; = Create(double)
  create([D)Lorg/tensorflow/Tensor; = Create(double[])
  create([[D)Lorg/tensorflow/Tensor; = Create(double[][])
  create([[[D)Lorg/tensorflow/Tensor; = Create(double[][][])
  create([[[[D)Lorg/tensorflow/Tensor; = Create(double[][][][])
  create([[[[[D)Lorg/tensorflow/Tensor; = Create(double[][][][][])
  create([[[[[[D)Lorg/tensorflow/Tensor; = Create(double[][][][][][])
  create(F)Lorg/tensorflow/Tensor; = Create(float)
  create([F)Lorg/tensorflow/Tensor; = Create(float[])
  create([[F)Lorg/tensorflow/Tensor; = Create(float[][])
  create([[[F)Lorg/tensorflow/Tensor; = Create(float[][][])
  create([[[[F)Lorg/tensorflow/Tensor; = Create(float[][][][])
  create([[[[[F)Lorg/tensorflow/Tensor; = Create(float[][][][][])
  create([[[[[[F)Lorg/tensorflow/Tensor; = Create(float[][][][][][])
  create(I)Lorg/tensorflow/Tensor; = Create(int)
  create([I)Lorg/tensorflow/Tensor; = Create(int[])
  create([[I)Lorg/tensorflow/Tensor; = Create(int[][])
  create([[[I)Lorg/tensorflow/Tensor; = Create(int[][][])
  create([[[[I)Lorg/tensorflow/Tensor; = Create(int[][][][])
  create([[[[[I)Lorg/tensorflow/Tensor; = Create(int[][][][][])
  create([[[[[[I)Lorg/tensorflow/Tensor; = Create(int[][][][][][])
  create(Ljava/lang/String;)Lorg/tensorflow/Tensor; = Create(string)
  create(Ljava/lang/String;Ljava/nio/charset/Charset;)Lorg/tensorflow/Tensor; = Create(string, Java.Nio.Charset.Charset)
  create(J)Lorg/tensorflow/Tensor; = Create(long)
  create([J)Lorg/tensorflow/Tensor; = Create(long[])
  create([[J)Lorg/tensorflow/Tensor; = Create(long[][])
  create([[[J)Lorg/tensorflow/Tensor; = Create(long[][][])
  create([[[[J)Lorg/tensorflow/Tensor; = Create(long[][][][])
  create([[[[[J)Lorg/tensorflow/Tensor; = Create(long[][][][][])
  create([[[[[[J)Lorg/tensorflow/Tensor; = Create(long[][][][][][])
org/tensorflow/types/UInt8 = Org.Tensorflow.Types.UInt8
